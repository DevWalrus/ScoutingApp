package com.clintenhopkins.scouting;

import static com.codename1.ui.CN.*;

import com.clintenhopkins.scouting.controller.MatchManager;
import com.clintenhopkins.scouting.utils.BoiseListener;
import com.clintenhopkins.scouting.view.NewMatch;
import com.codename1.components.*;
import com.codename1.location.Geofence;
import com.codename1.location.Location;
import com.codename1.location.LocationManager;
import com.codename1.ui.*;
import com.codename1.ui.Dialog;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;


/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class ScoutingApp {

    private Resources theme;
    private Form current;
    private final static GUIManager guiManager = GUIManager.getInstance();

    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if(err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error",
                "There was a networking error in the connection to " +
                err.getConnectionRequest().getUrl(), "OK", null);
        });

        Location nampaLoc = new Location(43.565468, -116.560822);
        Geofence gf = new Geofence("NampaMessage", nampaLoc, 7800, -1);
        LocationManager.getLocationManager().addGeoFencing(BoiseListener.class, gf);
    }
    
    public void start() {
        if(current != null){
            current.show();
            return;
        }
        guiManager.begin();
    }

    public void stop() {
        current = getCurrentForm();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = getCurrentForm();
        }
    }
    
    public void destroy() {
    }

}
